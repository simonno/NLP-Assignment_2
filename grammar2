# Symbols in the grammar are case-sensitive.
#
# This grammar uses a convention that
#    - terminals are lowercase          (president)
#    - preterminals are capitalized     (Noun)
#    - other nonterminals are all-caps  (NP)
#
# This convention just makes grammars more readable to humans.  Thus:
#
#    - When *you* are writing grammars, you should
#      follow this convention unless you have a good reason not to.
#
#    - But the  *program* should still work with grammars that don't
#      follow this convention.  So how can the program reliably tell
#      the difference between terminal and nonterminal symbols?  If
#      there is at least one rule for rewriting a symbol, then that
#      symbol is a nonterminal and should be rewritten.
#######################

# Rules for creating full sentences.

1	ROOT	S .
1   SBAR    COMP S

# The basic grammar rules.  Here's what the abbreviations stand for:
#    S  = sentence
#    NP = noun phrase
#    VP = verb phrase
#    PP = prepositional phrase
#    Det = determiner (sometimes called "article")
#    Prep = preposition
#    Adj = adjective

1	S	NP VP
4   VP  Vi
3   VP  Vt NP
3   VP  Vt PP
2   VP  Vt SBAR
1	VP	VBZ VPZ
1	VPZ ADJP
1   VPZ VBG NP
1   VP  VP CC VP
2	NP  NNP
3	NP	DT NN
1   NP  NP CC NP
1   PP  IN NP
1   NN  ADJP  NN
2   ADJP    JJ
1   ADJP    RB ADJP

# Vocabulary.  Your program can see that "ate" is a terminal
# symbol because there exists no rule for rewriting it.
# Any symbol that can rewrite as a terminal (or a string of
# terminals, like "chief of staff") is called a "preterminal."  Notice
# that a preterminal is a special kind of nonterminal.

1	Vi	sighed

1	Vt	ate
2	VBG eating

1	Vt	wanted
1	Vt	perplexed
1	Vt thought
1	Vt worked
2	VBZ	is

2	DT	the
1	DT	a

2	NNP	Sally
1	NNP	it

3	NN	president
2	NN	sandwich
1	NN	proposal
1	NN	desk

1	JJ	perplexed
1   JJ  lazy

1	RB	very

1	IN	on

1	COMP	that

1   CC  and

